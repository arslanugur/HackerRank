01 - ALGORİTMA, NASIL KODA ÇEVRİLİR?
# Programlamada, genellikle bir fonksiyon kullanılarak bir algoritma uygulanır.
# Bir fonksiyon, parametreler alabilen (girdiler),
                 talimatları uygulayabilen (işlem),
              ve değer döndürebilen (çıktı) bir kod bloğudur.
              
# Python' bir fonksiyonun syntax:
def name(param1, param2):
  # code
  # code
  # code
  # code
  return output
  
# Herhangi bir sayıda parametreye sahip olabiliriz
# Herhangi bir sayıda talimata sahip olabiliriz
# return ifadesinin zorunlu olmadığını bil


02 - BİR DİZİ İÇİNDE MİNİMUMU BULMAK
# Pseudo Code:
Procedure getMin(arr)
Begin
  n <- arr.length
  min <- (-infinity)
  for i:0 -> n
    if arr[i] < min then
      min <- arr[i]
    return min
End

# Python Code
def getMin(arr):
  n = len(arr)
  min = float("inf")
  for i in range(0, n):
    if arr[i] < min:
      min = arr[i]
  return min
  
  
03 - i++ NEDEN YAZILIR?
# i++ --> Döngü değişkenini artırmak için kullanılır 
# i++'nin nihai sonucu, i'nin öncekinden bir yüksek olmasıdır ki bu da istediğimizdir
# ancak bunu başarmanın ++i, i++ ve hatta i=i+1 gibi birçok yolu vardır
# POST INCREMENT (i++)
# Pseudo kodda, post-increment operatörü bir değişken i için kabaca aşağıdaki gibidir
  int j = i;
  i = i + 1;
  return j;
# Post-Increment operatörü, artan i + 1 değerini değil de, 
# i'nin orijinal değerini döndürmesi gerektiğinden, i'nin eski sürümünü saklamak zorundadır.

# Genellikle bu değeri depolamak için gereksiz yere ek bellek kullanıldığı anlamına gelir
# Çünkü çoğu durumda, aslında i'nin eski sürümünü kullanmıyoruz ve bu durumu basitçe göz ardı ediyoruz

# PRE INCREMENT (++i)
# Pseudo kodda, pre-increment operatörü i değişkeni için gözüken budur:
  i = i + 1;
  return i;
# Özellikle, burada i'nin eski değerini kaydetmek zorunda değiliz.
# Sadece i'nin şu anki değerine bir ekleyebilir ve geri dönebiliriz.

# Pre-Increment, bir döngüdeki tipik kullanım durumuyla çok daha uyumludur.
# Bu bağlamda i'nin eski değerine nadiren ihtiyaç duyarız.
# Bu nedenle, çoğu durumda, artırmakta olduğunuz değişkenin önceki değerine ihtiyacımız olmadığı sürece,
# Pre-Increment operatörünün, post-increment operatöründen daha iyi veya ona eşit olduğunu görülmektedir

